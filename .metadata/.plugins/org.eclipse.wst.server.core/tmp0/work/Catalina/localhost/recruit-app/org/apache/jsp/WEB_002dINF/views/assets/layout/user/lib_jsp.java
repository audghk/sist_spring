/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-07-10 07:53:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.assets.layout.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class lib_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("    <title>구지직 GoojzzK</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://localhost/recruit-app/assets/css/layout/user/c76e012c05e1318d.css\" crossorigin=\"anonymous\" data-n-g=\"\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://localhost/recruit-app/assets/css/layout/user/pretendardvariable-dynamic-subset.min.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://localhost/recruit-app/assets/css/layout/user/layout.css\" />\r\n");
      out.write("    <link href=\"http://localhost/recruit-app/assets/css/layout/user/common-sv-202405271315.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("	<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/static/pretendard.css\"/>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.7.1.js\" integrity=\"sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("      body {\r\n");
      out.write("        font-family: Pretendard, -apple-system, BlinkMacSystemFont, system-ui,\r\n");
      out.write("          Roboto, \"Helvetica Neue\", \"Segoe UI\", \"Apple SD Gothic Neo\",\r\n");
      out.write("          \"Noto Sans KR\", \"Malgun Gothic\", sans-serif;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("	    ");

		String userId = (String)session.getAttribute("userId");
		String name = (String)session.getAttribute("name");
	 	
      out.write("	\r\n");
      out.write("	    document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("	    	");
 if(userId != null && !userId.isEmpty()){
      out.write("\r\n");
      out.write("	    	\r\n");
      out.write("	    	    const moveMypageBtn = document.getElementById('moveMypageBtn');\r\n");
      out.write("			    const logoutBtn = document.getElementById('logoutBtn');\r\n");
      out.write("			    \r\n");
      out.write("			    moveMypageBtn.addEventListener('click',function(){\r\n");
      out.write("			    	window.location.href = 'http://localhost/recruit-app/user/mypage/mypageUserInfo.do';\r\n");
      out.write("			    });\r\n");
      out.write("			    \r\n");
      out.write("			    logoutBtn.addEventListener('click',function(){\r\n");
      out.write("			    	var conResult = confirm('로그아웃 하시겠습니까?');\r\n");
      out.write("			    	if(conResult){\r\n");
      out.write("				    	window.location.href = 'http://localhost/recruit-app/user/logout.do';\r\n");
      out.write("			    	}else{\r\n");
      out.write("			    		return;\r\n");
      out.write("			    	}//end else\r\n");
      out.write("			    });\r\n");
      out.write("			    \r\n");
      out.write("	    	");
}else {
      out.write("\r\n");
      out.write("		    const signupBtn = document.getElementById('signupBtn');\r\n");
      out.write("		    \r\n");
      out.write("		    signupBtn.addEventListener('click', function() {\r\n");
      out.write("		        window.location.href = 'http://localhost/recruit-app/user/loginPage.do'; // 이동할 페이지 URL\r\n");
      out.write("		    });\r\n");
      out.write("		    ");
}//end else
      out.write("\r\n");
      out.write("		    \r\n");
      out.write("	    });\r\n");
      out.write("    </script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
