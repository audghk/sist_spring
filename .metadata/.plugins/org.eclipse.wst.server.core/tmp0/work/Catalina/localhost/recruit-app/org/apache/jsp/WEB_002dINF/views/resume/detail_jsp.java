/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-07-14 16:33:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.resume;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/dev/workspace_spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/recruit-app/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1716272562048L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head> \r\n");
      out.write("	<!-- golgolz start -->\r\n");
      out.write("    <link href=\"http://localhost/recruit-app/assets/css/resume/write-sv-202405231305.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("    <link href=\"http://localhost/recruit-app/assets/css/resume/flow.css\" />\r\n");
      out.write("    <link href=\"http://localhost/recruit-app/assets/css/resume/layout-sv-202401301659.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://localhost/recruit-app/assets/css/layout/user/btn-bootstrap.css\" />\r\n");
      out.write("    <style>\r\n");
      out.write("      .autocomplete .list .hover {\r\n");
      out.write("        background-color: #f5f5f5;\r\n");
      out.write("      }\r\n");
      out.write("      .popupSearchDuty .list .hover {\r\n");
      out.write("        background-color: #f5f5f5;\r\n");
      out.write("      }\r\n");
      out.write("      .async-hide {\r\n");
      out.write("        opacity: 0 !important;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("    <!-- End Google Tag Manager -->\r\n");
      out.write("    <!-- 상단 선언 스크립트 : 모든페이지 공통 상단 필수 -->\r\n");
      out.write("    <!-- PlayD TERA Log Definition Script Start -->\r\n");
      out.write("    <script>\r\n");
      out.write("      window.onload = function () {\r\n");
      out.write("        (function (win, name) {\r\n");
      out.write("          win[\"LogAnalyticsObject\"] = name;\r\n");
      out.write("          win[name] =\r\n");
      out.write("            win[name] ||\r\n");
      out.write("            function () {\r\n");
      out.write("              (win[name].q = win[name].q || []).push(arguments);\r\n");
      out.write("            };\r\n");
      out.write("        })(window, \"_LA\");\r\n");
      out.write("      };\r\n");
      out.write("    </script>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../assets/layout/user/lib.jsp", out, false);
      out.write(" \r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/json2.js\"></script>\r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/jquery\"></script>\r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/itemtemplate.js\"></script>\r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/JK_Cookie.js\"></script>\r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/JK5cript.js\"></script>\r\n");
      out.write("    <script src=\"http://localhost/recruit-app/assets/js/user/resume/ResumeReg\"></script>\r\n");
      out.write("	<!-- golgolz end -->\r\n");
      out.write("	<script type=\"text/javascript\" src=\"http://localhost/recruit-app/assets/js/user/resume/edu.js\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://localhost/recruit-app/assets/css/resume/detail.css\" />\r\n");
      out.write("	<style text=\"text/css\">\r\n");
      out.write("		<!-- golgolz start -->\r\n");
      out.write("		<!-- golgolz end -->\r\n");
      out.write("	</style>\r\n");
      out.write("	<script text=\"text/javascript\">\r\n");
      out.write("	var filteredLanguageExamData = [\r\n");
      out.write("		  {\r\n");
      out.write("		    Lang_Code: \"16\",\r\n");
      out.write("		    Lang_Name: \"영어\",\r\n");
      out.write("		    Exams: [\r\n");
      out.write("		      { Exam_Code: 1, Exam_Name: \"TOEIC\" },\r\n");
      out.write("		      { Exam_Code: 28, Exam_Name: \"TOEIC(Speaking)\" },\r\n");
      out.write("		      { Exam_Code: 77, Exam_Name: \"TOEIC(Writing)\" },\r\n");
      out.write("		      { Exam_Code: 29, Exam_Name: \"TOEIC Speaking and Writing Tests\" },\r\n");
      out.write("		      { Exam_Code: 2, Exam_Name: \"TOEFL(PBT)\" },\r\n");
      out.write("		      { Exam_Code: 21, Exam_Name: \"TOEFL(CBT)\" },\r\n");
      out.write("		      { Exam_Code: 24, Exam_Name: \"TOEFL(iBT)\" },\r\n");
      out.write("		      { Exam_Code: 3, Exam_Name: \"TEPS\" },\r\n");
      out.write("		      { Exam_Code: 14, Exam_Name: \"IELTS\" },\r\n");
      out.write("		      { Exam_Code: 15, Exam_Name: \"G-TELP(GLT)\" },\r\n");
      out.write("		      { Exam_Code: 16, Exam_Name: \"G-TELP(GST)\" },\r\n");
      out.write("		      { Exam_Code: 75, Exam_Name: \"G-TELP(GWT)\" },\r\n");
      out.write("		      { Exam_Code: 76, Exam_Name: \"G-TELP(GBST)\" },\r\n");
      out.write("		      { Exam_Code: 17, Exam_Name: \"SLEP\" },\r\n");
      out.write("		      { Exam_Code: 18, Exam_Name: \"GRE\" },\r\n");
      out.write("		      { Exam_Code: 19, Exam_Name: \"GMAT\" },\r\n");
      out.write("		      { Exam_Code: 23, Exam_Name: \"PELT\" },\r\n");
      out.write("		      { Exam_Code: 30, Exam_Name: \"OPIc\" },\r\n");
      out.write("		      { Exam_Code: 79, Exam_Name: \"OPIc Listening&Reading\" },\r\n");
      out.write("		      { Exam_Code: 63, Exam_Name: \"OPIc Writing\" },\r\n");
      out.write("		      { Exam_Code: 80, Exam_Name: \"OPI\" },\r\n");
      out.write("		      { Exam_Code: 64, Exam_Name: \"FLEX 영어\" }\r\n");
      out.write("		    ]\r\n");
      out.write("		  },\r\n");
      out.write("		  {\r\n");
      out.write("		    Lang_Code: \"20\",\r\n");
      out.write("		    Lang_Name: \"일본어\",\r\n");
      out.write("		    Exams: [\r\n");
      out.write("		      { Exam_Code: 4, Exam_Name: \"JPT\" },\r\n");
      out.write("		      { Exam_Code: 13, Exam_Name: \"JLPT\" },\r\n");
      out.write("		      { Exam_Code: 34, Exam_Name: \"新JLPT\" },\r\n");
      out.write("		      { Exam_Code: 20, Exam_Name: \"JTRA\" },\r\n");
      out.write("		      { Exam_Code: 27, Exam_Name: \"NPT\" },\r\n");
      out.write("		      { Exam_Code: 37, Exam_Name: \"SJPT\" },\r\n");
      out.write("		      { Exam_Code: 48, Exam_Name: \"OPIc\" },\r\n");
      out.write("		      { Exam_Code: 67, Exam_Name: \"FLEX 일본어\" }\r\n");
      out.write("		    ]\r\n");
      out.write("		  },\r\n");
      out.write("		  {\r\n");
      out.write("		    Lang_Code: \"21\",\r\n");
      out.write("		    Lang_Name: \"중국어\",\r\n");
      out.write("		    Exams: [\r\n");
      out.write("		      { Exam_Code: 8, Exam_Name: \"HSK\" },\r\n");
      out.write("		      { Exam_Code: 32, Exam_Name: \"新HSK\" },\r\n");
      out.write("		      { Exam_Code: 33, Exam_Name: \"HSK회화\" },\r\n");
      out.write("		      { Exam_Code: 35, Exam_Name: \"新HSK회화\" },\r\n");
      out.write("		      { Exam_Code: 36, Exam_Name: \"TSC\" },\r\n");
      out.write("		      { Exam_Code: 38, Exam_Name: \"OPIc\" },\r\n");
      out.write("		      { Exam_Code: 42, Exam_Name: \"BCT\" },\r\n");
      out.write("		      { Exam_Code: 43, Exam_Name: \"CPT\" },\r\n");
      out.write("		      { Exam_Code: 78, Exam_Name: \"HSKK\" },\r\n");
      out.write("		      { Exam_Code: 81, Exam_Name: \"OPI\" },\r\n");
      out.write("		      { Exam_Code: 49, Exam_Name: \"新BCT(A)\" },\r\n");
      out.write("		      { Exam_Code: 50, Exam_Name: \"新BCT(B)\" },\r\n");
      out.write("		      { Exam_Code: 51, Exam_Name: \"新BCT(Speaking)\" },\r\n");
      out.write("		      { Exam_Code: 68, Exam_Name: \"FLEX 중국어\" }\r\n");
      out.write("		    ]\r\n");
      out.write("		  },\r\n");
      out.write("		  {\r\n");
      out.write("		    Lang_Code: \"4\",\r\n");
      out.write("		    Lang_Name: \"독일어\",\r\n");
      out.write("		    Exams: [\r\n");
      out.write("		      { Exam_Code: 11, Exam_Name: \"ZDAF\" },\r\n");
      out.write("		      { Exam_Code: 12, Exam_Name: \"ZMP\" },\r\n");
      out.write("		      { Exam_Code: 7, Exam_Name: \"GDS\" },\r\n");
      out.write("		      { Exam_Code: 9, Exam_Name: \"KDS\" },\r\n");
      out.write("		      { Exam_Code: 52, Exam_Name: \"DSH\" },\r\n");
      out.write("		      { Exam_Code: 53, Exam_Name: \"FLEX 독일어\" },\r\n");
      out.write("		      { Exam_Code: 54, Exam_Name: \"PWD\" },\r\n");
      out.write("		      { Exam_Code: 55, Exam_Name: \"SD1\" },\r\n");
      out.write("		      { Exam_Code: 56, Exam_Name: \"SD2\" },\r\n");
      out.write("		      { Exam_Code: 57, Exam_Name: \"SNULT 독일어\" },\r\n");
      out.write("		      { Exam_Code: 58, Exam_Name: \"TCT 번역능력인정시험 독일어\" },\r\n");
      out.write("		      { Exam_Code: 59, Exam_Name: \"TestDaF\" },\r\n");
      out.write("		      { Exam_Code: 60, Exam_Name: \"ZD\" },\r\n");
      out.write("		      { Exam_Code: 61, Exam_Name: \"ZOP\" },\r\n");
      out.write("		      { Exam_Code: 62, Exam_Name: \"관광통역안내사 독일어\" },\r\n");
      out.write("		      { Exam_Code: 83, Exam_Name: \"OPI\" }\r\n");
      out.write("		    ]\r\n");
      out.write("		  },\r\n");
      out.write("		  {\r\n");
      out.write("		    Lang_Code: \"27\",\r\n");
      out.write("		    Lang_Name: \"프랑스어\",\r\n");
      out.write("		    Exams: [\r\n");
      out.write("		      { Exam_Code: 6, Exam_Name: \"DELF\" },\r\n");
      out.write("		      { Exam_Code: 5, Exam_Name: \"DALF\" },\r\n");
      out.write("		      { Exam_Code: 82, Exam_Name: \"OPI\" },\r\n");
      out.write("		      { Exam_Code: 69, Exam_Name: \"FLEX 프랑스어\" }\r\n");
      out.write("		    ]\r\n");
      out.write("		  }\r\n");
      out.write("		];\r\n");
      out.write("	\r\n");
      out.write("		$(function(){\r\n");
      out.write("			<!-- golgolz start -->\r\n");
      out.write("			//$('.chip[data-value=\"Vue.js\"]').addClass(\"active\"); // select before rendering\r\n");
      out.write("	        $(\".chip\").click(function () {\r\n");
      out.write("	          $(this).toggleClass(\"active\");\r\n");
      out.write("\r\n");
      out.write("	          var selectedValues = $(\".chip.active\")\r\n");
      out.write("	            .map(function () {\r\n");
      out.write("	              return $(this).data(\"value\");\r\n");
      out.write("	            })\r\n");
      out.write("	            .get();\r\n");
      out.write("	        });\r\n");
      out.write("			\r\n");
      out.write("	        $(\"#resetButton\").click(function(event) {\r\n");
      out.write("                event.preventDefault(); // 기본 동작 방지\r\n");
      out.write("                $('.chip').removeClass('active'); // 모든 칩 선택 해제\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("			setTimeout(function() {\r\n");
      out.write("				$(\"#UserResume_M_Resume_Title\").focus(); // myInput은 포커스를 줄 input 요소의 ID\r\n");
      out.write("			}, 1); // 500ms (0.5초) 지연\r\n");
      out.write("			\r\n");
      out.write("			var area0 = [\"시/도 선택\",\"서울특별시\",\"인천광역시\",\"대전광역시\",\"광주광역시\",\"대구광역시\",\"울산광역시\",\"부산광역시\",\"경기도\",\"강원도\",\"충청북도\",\"충청남도\",\"전라북도\",\"전라남도\",\"경상북도\",\"경상남도\",\"제주도\"];\r\n");
      out.write("			var area1 = [\"강남구\",\"강동구\",\"강북구\",\"강서구\",\"관악구\",\"광진구\",\"구로구\",\"금천구\",\"노원구\",\"도봉구\",\"동대문구\",\"동작구\",\"마포구\",\"서대문구\",\"서초구\",\"성동구\",\"성북구\",\"송파구\",\"양천구\",\"영등포구\",\"용산구\",\"은평구\",\"종로구\",\"중구\",\"중랑구\"];\r\n");
      out.write("			var area2 = [\"계양구\",\"남구\",\"남동구\",\"동구\",\"부평구\",\"서구\",\"연수구\",\"중구\",\"강화군\",\"옹진군\"];\r\n");
      out.write("			var area3 = [\"대덕구\",\"동구\",\"서구\",\"유성구\",\"중구\"];\r\n");
      out.write("			var area4 = [\"광산구\",\"남구\",\"동구\", \"북구\",\"서구\"];\r\n");
      out.write("			var area5 = [\"남구\",\"달서구\",\"동구\",\"북구\",\"서구\",\"수성구\",\"중구\",\"달성군\"];\r\n");
      out.write("			var area6 = [\"남구\",\"동구\",\"북구\",\"중구\",\"울주군\"];\r\n");
      out.write("			var area7 = [\"강서구\",\"금정구\",\"남구\",\"동구\",\"동래구\",\"부산진구\",\"북구\",\"사상구\",\"사하구\",\"서구\",\"수영구\",\"연제구\",\"영도구\",\"중구\",\"해운대구\",\"기장군\"];\r\n");
      out.write("			var area8 = [\"고양시\",\"과천시\",\"광명시\",\"광주시\",\"구리시\",\"군포시\",\"김포시\",\"남양주시\",\"동두천시\",\"부천시\",\"성남시\",\"수원시\",\"시흥시\",\"안산시\",\"안성시\",\"안양시\",\"양주시\",\"오산시\",\"용인시\",\"의왕시\",\"의정부시\",\"이천시\",\"파주시\",\"평택시\",\"포천시\",\"하남시\",\"화성시\",\"가평군\",\"양평군\",\"여주군\",\"연천군\"];\r\n");
      out.write("			var area9 = [\"강릉시\",\"동해시\",\"삼척시\",\"속초시\",\"원주시\",\"춘천시\",\"태백시\",\"고성군\",\"양구군\",\"양양군\",\"영월군\",\"인제군\",\"정선군\",\"철원군\",\"평창군\",\"홍천군\",\"화천군\",\"횡성군\"];\r\n");
      out.write("			var area10 = [\"제천시\",\"청주시\",\"충주시\",\"괴산군\",\"단양군\",\"보은군\",\"영동군\",\"옥천군\",\"음성군\",\"증평군\",\"진천군\",\"청원군\"];\r\n");
      out.write("			var area11 = [\"계룡시\",\"공주시\",\"논산시\",\"보령시\",\"서산시\",\"아산시\",\"천안시\",\"금산군\",\"당진군\",\"부여군\",\"서천군\",\"연기군\",\"예산군\",\"청양군\",\"태안군\",\"홍성군\"];\r\n");
      out.write("			var area12 = [\"군산시\",\"김제시\",\"남원시\",\"익산시\",\"전주시\",\"정읍시\",\"고창군\",\"무주군\",\"부안군\",\"순창군\",\"완주군\",\"임실군\",\"장수군\",\"진안군\"];\r\n");
      out.write("			var area13 = [\"광양시\",\"나주시\",\"목포시\",\"순천시\",\"여수시\",\"강진군\",\"고흥군\",\"곡성군\",\"구례군\",\"담양군\",\"무안군\",\"보성군\",\"신안군\",\"영광군\",\"영암군\",\"완도군\",\"장성군\",\"장흥군\",\"진도군\",\"함평군\",\"해남군\",\"화순군\"];\r\n");
      out.write("			var area14 = [\"경산시\",\"경주시\",\"구미시\",\"김천시\",\"문경시\",\"상주시\",\"안동시\",\"영주시\",\"영천시\",\"포항시\",\"고령군\",\"군위군\",\"봉화군\",\"성주군\",\"영덕군\",\"영양군\",\"예천군\",\"울릉군\",\"울진군\",\"의성군\",\"청도군\",\"청송군\",\"칠곡군\"];\r\n");
      out.write("			var area15 = [\"거제시\",\"김해시\",\"마산시\",\"밀양시\",\"사천시\",\"양산시\",\"진주시\",\"진해시\",\"창원시\",\"통영시\",\"거창군\",\"고성군\",\"남해군\",\"산청군\",\"의령군\",\"창녕군\",\"하동군\",\"함안군\",\"함양군\",\"합천군\"];\r\n");
      out.write("			var area16 = [\"서귀포시\",\"제주시\",\"남제주군\",\"북제주군\"];\r\n");
      out.write("			 \r\n");
      out.write("			// 시/도 선택 박스 초기화\r\n");
      out.write("			$(\"select[name^=sido]\").each(function() {\r\n");
      out.write("				$selsido = $(this);\r\n");
      out.write("				$.each(eval(area0), function() {\r\n");
      out.write("					$selsido.append(\"<option style='font-size: 14px;' value='\"+this+\"'>\"+this+\"</option>\");\r\n");
      out.write("				});\r\n");
      out.write("				$selsido.next().append(\"<option style='font-size: 14px;' value=''>구/군 선택</option>\");\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			// 시/도 선택시 구/군 설정\r\n");
      out.write("			$(\"select[name^=sido]\").change(function() {\r\n");
      out.write("				var area = \"area\"+$(\"option\",$(this)).index($(\"option:selected\",$(this))); // 선택지역의 구군 Array\r\n");
      out.write("				var $gugun = $(this).next(); // 선택영역 군구 객체\r\n");
      out.write("				$(\"option\",$gugun).remove(); // 구군 초기화\r\n");
      out.write("	\r\n");
      out.write("				if(area == \"area0\")\r\n");
      out.write("					$gugun.append(\"<option style='font-size: 14px;' value=''>구/군 선택</option>\");\r\n");
      out.write("				else {\r\n");
      out.write("					$.each(eval(area), function() {\r\n");
      out.write("					$gugun.append(\"<option style='font-size: 14px;' value='\"+this+\"'>\"+this+\"</option>\");\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			var resumeNum = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${resumeNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("	    	var id = \"");
      out.print( session.getAttribute("userId") );
      out.write("\";\r\n");
      out.write("	    	\r\n");
      out.write("			if (resumeNum) {\r\n");
      out.write("				$.ajax({\r\n");
      out.write("		            url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/api/manage/resumes/detail.do?id=\" + resumeNum,\r\n");
      out.write("		            method: 'GET',\r\n");
      out.write("		            dataType: 'JSON',\r\n");
      out.write("		            success: function(data) {\r\n");
      out.write("		            	console.log(data);\r\n");
      out.write("		            	updateTitle(data.title);\r\n");
      out.write("		            	updateProfileForm(data);\r\n");
      out.write("		            	updateSkills(data.subData.skills); \r\n");
      out.write("		            	updateCareer(data.subData.career);\r\n");
      out.write("		            	updateLanguages(data.subData.languages);\r\n");
      out.write("		            	updateCertifications(data.subData.certifications);\r\n");
      out.write("		            	updateIntroduction(data.introduce);\r\n");
      out.write("		                updateEducation(data.subData.education);\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function(xhr, status, error) {\r\n");
      out.write("		                console.error(\"Error fetching data: \" + error);\r\n");
      out.write("		                $(\"#recruit-list tbody\").html('<tr><td colspan=\"4\" style=\"font-size: 16px; font-weight: bold;\">데이터를 불러오는 데 실패했습니다.</td></tr>');\r\n");
      out.write("		            }\r\n");
      out.write("		        });\r\n");
      out.write("		    } else {\r\n");
      out.write("		    	$.ajax({\r\n");
      out.write("		    		url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/api/resume/profile.do?id=\" + id,\r\n");
      out.write("		    		method: \"GET\",\r\n");
      out.write("		    		dataType: \"JSON\",\r\n");
      out.write("		    		success: function(data){\r\n");
      out.write("		    			console.log(data);\r\n");
      out.write("		    			updateProfileForm(data);\r\n");
      out.write("		    		},\r\n");
      out.write("		    		error: function(xhr, status, error){\r\n");
      out.write("		                console.error(\"Error fetching data: \" + error);\r\n");
      out.write("		    		}\r\n");
      out.write("		    	});\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("			$(\"#registerBtn\").click(function(){\r\n");
      out.write("				if(confirm(\"등록하시겠습니까?\")){\r\n");
      out.write("					let resumeData = createResumeData();\r\n");
      out.write("					console.log(resumeData);\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/api/resume.do\",\r\n");
      out.write("						method: \"POST\",\r\n");
      out.write("				        contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("				        data: JSON.stringify(resumeData),\r\n");
      out.write("						success: function(data){\r\n");
      out.write("							console.log(\"success\");\r\n");
      out.write("							alert(\"등록이 완료되었습니다.\");\r\n");
      out.write("						},\r\n");
      out.write("						error: function(xhr, status, error){\r\n");
      out.write("							console.log(\"fail\");\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(\"#updateBtn\").click(function(){\r\n");
      out.write("				if(confirm(\"수정하시겠습니까?\")){\r\n");
      out.write("					let resumeData = createResumeData();\r\n");
      out.write("					console.log(resumeData);\r\n");
      out.write("					console.log(JSON.stringify(resumeData));\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/api/resume.do\",\r\n");
      out.write("						type: \"PUT\",\r\n");
      out.write("				        contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("				        data: JSON.stringify(resumeData),\r\n");
      out.write("						success: function(data){\r\n");
      out.write("							alert(\"수정이 완료되었습니다.\");\r\n");
      out.write("						},\r\n");
      out.write("						error: function(xhr, status, error){\r\n");
      out.write("							console.log(\"fail\");\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(\"#removeBtn\").click(function(){\r\n");
      out.write("				if(confirm(\"삭제하시겠습니까?\")){\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/api/resume.do?id=\" + resumeNum,\r\n");
      out.write("						type: \"DELETE\",\r\n");
      out.write("						success: function(data){\r\n");
      out.write("							alert(\"삭제가 완료되었습니다.\");\r\n");
      out.write("						},\r\n");
      out.write("						error: function(xhr, status, error){\r\n");
      out.write("							console.log(\"fail\");\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			<!-- golgolz end -->\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		/* 수정 삭제를 위한 js functions start */\r\n");
      out.write("		function updateTitle(titleData){\r\n");
      out.write("		    $('#UserResume_M_Resume_Title').val(titleData);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateProfileForm(data) {\r\n");
      out.write("		    $('#UserInfo_M_Name').val(data.owner);\r\n");
      out.write("		    $('#UserInfo_M_Born').val(data.birth);\r\n");
      out.write("		    $('#genderSelect').val(data.gender);\r\n");
      out.write("		    $('#UserInfo_M_Email').val(data.email);\r\n");
      out.write("		    $('input[name=\"UserInfo.M_Hand_Phone\"]').eq(0).val(data.tel);\r\n");
      out.write("		    $('input[name=\"UserInfo.M_Hand_Phone\"]').eq(1).val(data.phone);\r\n");
      out.write("\r\n");
      out.write("		    if (data.addr) {\r\n");
      out.write("		        var addrParts = data.addr.split(' ');\r\n");
      out.write("		        if (addrParts.length >= 2) {\r\n");
      out.write("		            var sido = addrParts[0];\r\n");
      out.write("		            var gugun = addrParts.slice(1).join(' ');\r\n");
      out.write("		\r\n");
      out.write("		            $('#sido1').val(sido);\r\n");
      out.write("		            $('#sido1').trigger('change');\r\n");
      out.write("\r\n");
      out.write("		            setTimeout(function() {\r\n");
      out.write("		                $('#gugun1').val(gugun);\r\n");
      out.write("		            }, 100);\r\n");
      out.write("		        }\r\n");
      out.write("		    }\r\n");
      out.write("\r\n");
      out.write("		    if (data.profile) {\r\n");
      out.write("		        $('.picture').css('background-image', `url(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${data.profile}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")`).addClass('dropped');\r\n");
      out.write("		    }\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateSkills(skills) {\r\n");
      out.write("			if(skills == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		    $('.chip').removeClass('active');\r\n");
      out.write("		    skills.forEach(function(skill) {\r\n");
      out.write("		        $('.chip[data-value=\"' + skill.skill_name + '\"]').addClass('active');\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function addSchoolItem() {\r\n");
      out.write("		    var containerCount = $('#school_containers .container').length;\r\n");
      out.write("		    var newSchoolHtml = $('#tplSchool').html().replace(/\\{no\\}/g, containerCount + 1);\r\n");
      out.write("		    $('#school_containers').append(newSchoolHtml);\r\n");
      out.write("\r\n");
      out.write("		    // 새로 추가된 학교 항목에 대한 이벤트 리스너 추가\r\n");
      out.write("		    var $newSchool = $('#school_containers .container').last();\r\n");
      out.write("		    initSchoolItemEvents($newSchool);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function initSchoolItemEvents($school) {\r\n");
      out.write("		    $school.find('.dropdown-education-category .button').click(function() {\r\n");
      out.write("		        $(this).closest('.dropdown').find('.list').toggleClass('hidden');\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		    $school.find('.dropdown-education-category .eduItem').click(function() {\r\n");
      out.write("		        var schoolType = $(this).data('schltypecode');\r\n");
      out.write("		        updateSchoolType($school, schoolType);\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		    $school.find('.buttonDeleteField').click(function() {\r\n");
      out.write("		        $school.remove();\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateSchoolType($school, schoolType) {\r\n");
      out.write("		    var templateId = schoolType === \"0\" ? '#tplHighSchool' : '#tplUnivSchool';\r\n");
      out.write("		    var newSchoolHtml = $(templateId).html().replace(/\\{no\\}/g, $school.index() + 1);\r\n");
      out.write("		    $school.replaceWith(newSchoolHtml);\r\n");
      out.write("		    \r\n");
      out.write("		    var $newSchool = $('#school_containers .container').eq($school.index());\r\n");
      out.write("		    initSchoolItemEvents($newSchool);\r\n");
      out.write("\r\n");
      out.write("		    if (schoolType !== \"0\") {\r\n");
      out.write("		        initUnivSchoolEvents($newSchool);\r\n");
      out.write("		    }\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateEducation(educationData) {\r\n");
      out.write("			if(educationData == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$('#school_containers').empty();\r\n");
      out.write("		    \r\n");
      out.write("		    var gradStateMap = {\r\n");
      out.write("		        \"졸업\": \"10\",\r\n");
      out.write("		        \"졸업예정\": \"5\",\r\n");
      out.write("		        \"재학중\": \"4\",\r\n");
      out.write("		        \"중퇴\": \"2\",\r\n");
      out.write("		        \"수료\": \"9\",\r\n");
      out.write("		        \"휴학\": \"3\"\r\n");
      out.write("		    };\r\n");
      out.write("		    \r\n");
      out.write("		    var degreeMap = {\r\n");
      out.write("		        \"1\": \"(2,3년제)학사\",\r\n");
      out.write("		        \"2\": \"(4년제)학사\",\r\n");
      out.write("		        \"3\": \"석사\",\r\n");
      out.write("		        \"4\": \"박사\"\r\n");
      out.write("		    };\r\n");
      out.write("		    \r\n");
      out.write("		    educationData.forEach(function(edu, index) {\r\n");
      out.write("		        var templateId;\r\n");
      out.write("		        if (edu.school_classification === \"1\") {\r\n");
      out.write("		            templateId = '#tplHighSchool';\r\n");
      out.write("		        } else {\r\n");
      out.write("		            templateId = '#tplUnivSchool';\r\n");
      out.write("		        }\r\n");
      out.write("		        \r\n");
      out.write("		        var newSchoolHtml = $(templateId).html().replace(/\\{no\\}/g, index + 1);\r\n");
      out.write("		        var $newSchool = $(newSchoolHtml);\r\n");
      out.write("		        var $schoolNameInput = $newSchool.find('[data-type=\"School_Name\"][data-comp_type=\"jkAcInput\"]');\r\n");
      out.write("		        $schoolNameInput.val(edu.school_name);\r\n");
      out.write("		        \r\n");
      out.write("		        if (edu.school_classification === \"1\") {\r\n");
      out.write("		            $newSchool.find('[name=\"HighSchool.Schl_Name\"]').val(edu.school_name);\r\n");
      out.write("		            $newSchool.find('#HighSchool_Schl_Name_Search').val(edu.school_name);\r\n");
      out.write("		            $newSchool.find('#HighSchool_Grad_Year').val(edu.graduation_date.substring(0, 4));\r\n");
      out.write("		            \r\n");
      out.write("		            var $gradStateDropdown = $newSchool.find('.dropdown-edcation-state');\r\n");
      out.write("		            var $gradStateButton = $gradStateDropdown.find('.buttonChoose');\r\n");
      out.write("		            var $gradStateInput = $newSchool.find('#HighSchool_Grad_Type_Code');\r\n");
      out.write("		            \r\n");
      out.write("		            if (edu.graduation_state && gradStateMap[edu.graduation_state]) {\r\n");
      out.write("		                $gradStateDropdown.addClass('selected');\r\n");
      out.write("		                $gradStateDropdown.find('.label').removeClass('hidden').attr('aria-hidden', 'false');\r\n");
      out.write("		                $gradStateButton.html('<span>' + edu.graduation_state + '</span>');\r\n");
      out.write("		                $gradStateInput.val(gradStateMap[edu.graduation_state]);\r\n");
      out.write("		            }\r\n");
      out.write("		        } else {\r\n");
      out.write("		            $newSchool.find('[name$=\"Schl_Name\"]').val(edu.school_name);\r\n");
      out.write("		            $newSchool.find('[name$=\"Entc_YM\"]').val(edu.admission_date);\r\n");
      out.write("		            $newSchool.find('[name$=\"Grad_YM\"]').val(edu.graduation_date);\r\n");
      out.write("		            \r\n");
      out.write("		            var $gradStateDropdown = $newSchool.find('.dropdown-edcation-state');\r\n");
      out.write("		            var $gradStateButton = $gradStateDropdown.find('.buttonChoose');\r\n");
      out.write("		            var $gradStateLabel = $gradStateDropdown.find('.label');\r\n");
      out.write("		            var $gradStateInput = $newSchool.find('[name$=\"Grad_Type_Code\"]');\r\n");
      out.write("		            \r\n");
      out.write("		            if (edu.graduation_state && gradStateMap[edu.graduation_state]) {\r\n");
      out.write("		                $gradStateDropdown.addClass('selected');\r\n");
      out.write("		                $gradStateLabel.removeClass('hidden').attr('aria-hidden', 'false');\r\n");
      out.write("		                $gradStateButton.html('<span>' + edu.graduation_state + '</span>');\r\n");
      out.write("		                $gradStateInput.val(gradStateMap[edu.graduation_state]);\r\n");
      out.write("		            }\r\n");
      out.write("		            \r\n");
      out.write("		            var $degreeDropdown = $newSchool.find('.dropdown-edcation-degree');\r\n");
      out.write("		            var $degreeButton = $degreeDropdown.find('.buttonChoose');\r\n");
      out.write("		            var $degreeInput = $newSchool.find('[name$=\"Mstr_Dctr_Type_Code\"]');\r\n");
      out.write("		            \r\n");
      out.write("		            var degreeIndex = Math.min(parseInt(edu.school_classification) - 1, 3);\r\n");
      out.write("		            var degreeValue = Object.keys(degreeMap)[degreeIndex];\r\n");
      out.write("		            var degreeText = degreeMap[degreeValue];\r\n");
      out.write("\r\n");
      out.write("		            $degreeDropdown.addClass('selected');\r\n");
      out.write("		            $degreeDropdown.find('.label').removeClass('hidden').attr('aria-hidden', 'false');\r\n");
      out.write("		            $degreeButton.html('<span>' + degreeText + '</span>');\r\n");
      out.write("		            $degreeInput.val(degreeValue);\r\n");
      out.write("		            \r\n");
      out.write("		            var $totalScoreDropdown = $newSchool.find('.dropdown-education-total');\r\n");
      out.write("		            var $totalScoreButton = $totalScoreDropdown.find('.buttonChoose span');\r\n");
      out.write("		            var $totalScoreInput = $newSchool.find('[name$=\"Grade_Prft_Scr\"]');\r\n");
      out.write("		            \r\n");
      out.write("		            if (edu.total_score) {\r\n");
      out.write("		                $totalScoreDropdown.addClass('selected');\r\n");
      out.write("		                $totalScoreDropdown.find('.label').removeClass('hidden').attr('aria-hidden', 'false');\r\n");
      out.write("		                $totalScoreButton.text(edu.total_score);\r\n");
      out.write("		                $totalScoreInput.val(edu.total_score);\r\n");
      out.write("		                \r\n");
      out.write("		                $totalScoreDropdown.find('.list ul li button').each(function() {\r\n");
      out.write("		                    $(this).toggleClass('selected', $(this).data('value') == edu.total_score);\r\n");
      out.write("		                });\r\n");
      out.write("		            }\r\n");
      out.write("		            \r\n");
      out.write("		            $newSchool.find('[data-type=\"Major_Name\"]').val(edu.major);\r\n");
      out.write("		            $newSchool.find('[name$=\"Grade\"]').val(edu.grades);\r\n");
      out.write("		            $newSchool.find('[name$=\"Grade_Prft_Scr\"]').val(edu.total_score);\r\n");
      out.write("		        }\r\n");
      out.write("		        \r\n");
      out.write("		        $newSchool.find('.list').removeClass('visible').addClass('hidden');\r\n");
      out.write("		        \r\n");
      out.write("		        $('#school_containers').append($newSchool);\r\n");
      out.write("		        initSchoolItemEvents($newSchool);\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function initUnivSchoolEvents($school) {\r\n");
      out.write("		    $school.find('.dropdown-edcation-state .buttonChoose').click(function(e) {\r\n");
      out.write("		        e.preventDefault();\r\n");
      out.write("		        var $list = $(this).closest('.dropdown').find('.list');\r\n");
      out.write("		\r\n");
      out.write("		        if ($list.hasClass('hidden')) {\r\n");
      out.write("		            $list.removeClass('hidden').addClass('visible');\r\n");
      out.write("		        } else {\r\n");
      out.write("		            $list.removeClass('visible').addClass('hidden');\r\n");
      out.write("		        }\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		    $school.find('.dropdown-edcation-state .list .button').click(function(e) {\r\n");
      out.write("		        e.preventDefault();\r\n");
      out.write("		        var selectedValue = $(this).data('value');\r\n");
      out.write("		        var selectedText = $(this).find('span').text();\r\n");
      out.write("		        var $dropdown = $(this).closest('.dropdown');\r\n");
      out.write("		        \r\n");
      out.write("		        $dropdown.addClass('selected');\r\n");
      out.write("		        $dropdown.find('.label').removeClass('hidden').attr('aria-hidden', 'false');\r\n");
      out.write("		        $dropdown.find('.buttonChoose').html('<span>' + selectedText + '</span>');\r\n");
      out.write("		        $dropdown.find('input[type=\"hidden\"]').val(selectedValue);\r\n");
      out.write("		        $dropdown.find('.list').removeClass('visible').addClass('hidden');\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateCertifications(certificationData) {\r\n");
      out.write("			if(certificationData == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		    $('#license_containers').empty();\r\n");
      out.write("\r\n");
      out.write("		    certificationData.forEach(function(cert, index) {\r\n");
      out.write("		        var newCertHtml = $('#tplLicenseItem').html().replace(/c23/g, 'c' + (index + 1));\r\n");
      out.write("		        var $newCert = $(newCertHtml);\r\n");
      out.write("\r\n");
      out.write("		        $newCert.find('[data-type=\"Lc_Name\"]').val(cert.certificate_name);\r\n");
      out.write("		        $newCert.find('[data-type=\"Lc_Pub\"]').val(cert.publisher);\r\n");
      out.write("		        $newCert.find('[data-format-type=\"month\"]').val(cert.acquisition_date);\r\n");
      out.write("		        $newCert.find('.dev-btn-del-license').click(function() {\r\n");
      out.write("		            $(this).closest('.container').remove();\r\n");
      out.write("		        });\r\n");
      out.write("		        $('#license_containers').append($newCert);\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		    $('.formWrapCertificate .buttonAddField').off('click').click(function() {\r\n");
      out.write("		        var newIndex = $('#license_containers .container').length + 1;\r\n");
      out.write("		        var newCertHtml = $('#tplLicenseItem').html().replace(/c23/g, 'c' + newIndex);\r\n");
      out.write("		        var $newCert = $(newCertHtml);\r\n");
      out.write("\r\n");
      out.write("		        $newCert.find('.dev-btn-del-license').click(function() {\r\n");
      out.write("		            $(this).closest('.container').remove();\r\n");
      out.write("		        });\r\n");
      out.write("\r\n");
      out.write("		        $('#license_containers').append($newCert);\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateCareer(careerData) {\r\n");
      out.write("			if(careerData == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		    $('#career_containers').empty();\r\n");
      out.write("		    \r\n");
      out.write("		    careerData.forEach(function(career, index) {\r\n");
      out.write("		        var newCareerHtml = $('#tplCareerItem').html().replace(/c14/g, 'c' + (index + 1));\r\n");
      out.write("		        var $newCareer = $(newCareerHtml);\r\n");
      out.write("		        \r\n");
      out.write("		        $newCareer.find('[id^=\"Career_C_Name_\"]').val(career.company_name);\r\n");
      out.write("		        $newCareer.find('[id^=\"Career_C_Part_\"]').val(career.dname);\r\n");
      out.write("		        $newCareer.find('[id^=\"Career_CSYM_\"]').val(career.join_date);\r\n");
      out.write("		        if (career.resignation_date) {\r\n");
      out.write("		            $newCareer.find('[id^=\"Career_CEYM_\"]').val(career.resignation_date);\r\n");
      out.write("		        } else {\r\n");
      out.write("		            $newCareer.find('[id^=\"Career_CEYM_\"]').val('재직중');\r\n");
      out.write("		        }\r\n");
      out.write("\r\n");
      out.write("		        if (career.position) {\r\n");
      out.write("		            $newCareer.find('[id^=\"Career_position_field\"]').val(career.position);\r\n");
      out.write("		        }\r\n");
      out.write("		        \r\n");
      out.write("		        if (career.sal) {\r\n");
      out.write("		            $newCareer.find('[id^=\"Career_M_MainPay_User_\"]').val(career.sal);\r\n");
      out.write("		        }\r\n");
      out.write("		        \r\n");
      out.write("		        $newCareer.find('[id^=\"Career_Prfm_Prt_\"]').val(career.job_description);\r\n");
      out.write("		        $('#career_containers').append($newCareer);\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function updateLanguages(languageData) {\r\n");
      out.write("			if(languageData == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		    var $container = $('#language_containers');\r\n");
      out.write("		    \r\n");
      out.write("		    if ($container.length === 0) {\r\n");
      out.write("		        return;\r\n");
      out.write("		    }\r\n");
      out.write("\r\n");
      out.write("		    $container.html('');\r\n");
      out.write("\r\n");
      out.write("		    var $template = $('#tplLanguageItem');\r\n");
      out.write("		    if ($template.length === 0) {\r\n");
      out.write("		        console.error(\"Error: Template #tplLanguageItem not found\");\r\n");
      out.write("		        return;\r\n");
      out.write("		    }\r\n");
      out.write("\r\n");
      out.write("		    var templateHtml = $template.html();\r\n");
      out.write("\r\n");
      out.write("		    languageData.forEach(function(lang, index) {\r\n");
      out.write("		        var newItemHtml = templateHtml.replace(/c508/g, 'c' + (index + 1));\r\n");
      out.write("		        var $newLangItem = $(newItemHtml);\r\n");
      out.write("		        \r\n");
      out.write("		        var categoryValue = lang.category === \"회화능력\" ? \"1\" : \"2\";\r\n");
      out.write("		        $newLangItem.find('[name$=\"Eval_Category\"]').val(categoryValue);\r\n");
      out.write("		        $newLangItem.find('.dropdown-category .buttonChoose span').text(lang.category);\r\n");
      out.write("		        $newLangItem.find('.dropdown-category').addClass('selected');\r\n");
      out.write("		        $newLangItem.find('.dropdown-category .label').attr('aria-hidden', 'false').removeClass('hidden');\r\n");
      out.write("\r\n");
      out.write("		        var langCode = getLanguageCode(lang.language);\r\n");
      out.write("		        $newLangItem.find('[name$=\"Lang1_Name\"]').val(langCode);\r\n");
      out.write("		        $newLangItem.find('.dropdown-language-name .buttonChoose span').text(lang.language);\r\n");
      out.write("		        $newLangItem.find('.dropdown-language-name').addClass('selected');\r\n");
      out.write("		        $newLangItem.find('.dropdown-language-name .label').attr('aria-hidden', 'false').removeClass('hidden');\r\n");
      out.write("\r\n");
      out.write("		        if (lang.category === \"회화능력\") {\r\n");
      out.write("		            $newLangItem.find('.devConversationArea').show();\r\n");
      out.write("		            $newLangItem.find('.devExamArea').hide();\r\n");
      out.write("\r\n");
      out.write("		            var conversationLevelValue = getConversationLevelValue(lang.lang_level);\r\n");
      out.write("		            $newLangItem.find('[name$=\"Lang1_Stat\"]').val(conversationLevelValue);\r\n");
      out.write("		            $newLangItem.find('.devConversationArea .buttonChoose span').text(lang.lang_level);\r\n");
      out.write("		            $newLangItem.find('.devConversationArea .dropdown-language-grade').addClass('selected');\r\n");
      out.write("		            $newLangItem.find('.devConversationArea .dropdown-language-grade .label').attr('aria-hidden', 'false').removeClass('hidden');\r\n");
      out.write("		        } else if (lang.category === \"공인시험\") {\r\n");
      out.write("		            $newLangItem.find('.devExamArea').show();\r\n");
      out.write("		            $newLangItem.find('.devConversationArea').hide();\r\n");
      out.write("\r\n");
      out.write("		            var examList = getExamListByLanguage(langCode);\r\n");
      out.write("		            var $examListContainer = $newLangItem.find('.devExamDropdown .list ul');\r\n");
      out.write("		            $examListContainer.empty();\r\n");
      out.write("		            examList.forEach(function(exam) {\r\n");
      out.write("		                $examListContainer.append('<li><button type=\"button\" class=\"button\" data-value=\"' + exam.Exam_Code + '\"><span>' + exam.Exam_Name + '</span></button></li>');\r\n");
      out.write("		            });\r\n");
      out.write("\r\n");
      out.write("		            var examInfo = getExamInfo(langCode, lang.test_name);\r\n");
      out.write("		            $newLangItem.find('[name$=\"Test1_Name\"]').val(examInfo.Exam_Code);\r\n");
      out.write("		            $newLangItem.find('.devExamDropdown .buttonChoose span').text(lang.test_name);\r\n");
      out.write("		            $newLangItem.find('.devExamDropdown').addClass('selected').css({\r\n");
      out.write("		                'display': 'inline-block',\r\n");
      out.write("		                'margin-right': '10px'\r\n");
      out.write("		            });\r\n");
      out.write("		            $newLangItem.find('.devExamDropdown .label').attr('aria-hidden', 'false').removeClass('hidden');\r\n");
      out.write("		            $newLangItem.find('.devExamInput').remove();\r\n");
      out.write("		            $newLangItem.find('.devExamGradeInput').addClass('is-value').show().css({\r\n");
      out.write("		                'display': 'inline-block',\r\n");
      out.write("		                'margin-right': '10px'\r\n");
      out.write("		            });\r\n");
      out.write("		            $newLangItem.find('.devExamGradeInput input').val(lang.lang_level);\r\n");
      out.write("		            $newLangItem.find('.devExamGradeDropdown').hide();\r\n");
      out.write("		            $newLangItem.find('.devExamGradeDropdown input').attr('disabled', 'disabled');\r\n");
      out.write("		            $newLangItem.find('[name$=\"Test_YYMM\"]').val(lang.aquisition_date);\r\n");
      out.write("		            $newLangItem.find('.input-passdate').addClass('is-value').css({\r\n");
      out.write("		                'display': 'inline-block'\r\n");
      out.write("		            });\r\n");
      out.write("		        }\r\n");
      out.write("		        $container.append($newLangItem);\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function getExamListByLanguage(langCode) {\r\n");
      out.write("		    var language = filteredLanguageExamData.find(lang => lang.Lang_Code === langCode);\r\n");
      out.write("		    return language ? language.Exams : [];\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	    function getLanguageCode(languageName) {\r\n");
      out.write("	        var language = filteredLanguageExamData.find(lang => lang.Lang_Name === languageName);\r\n");
      out.write("	        return language ? language.Lang_Code : \"\";\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    function getConversationLevelValue(level) {\r\n");
      out.write("	        var levels = {\r\n");
      out.write("	            \"일상회화 가능\": \"1\",\r\n");
      out.write("	            \"비즈니스 회화가능\": \"2\",\r\n");
      out.write("	            \"원어민 수준\": \"3\"\r\n");
      out.write("	        };\r\n");
      out.write("	        return levels[level] || \"\";\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    function getExamInfo(langCode, examName) {\r\n");
      out.write("	        var language = filteredLanguageExamData.find(lang => lang.Lang_Code === langCode);\r\n");
      out.write("	        if (language) {\r\n");
      out.write("	            var exam = language.Exams.find(exam => exam.Exam_Name === examName);\r\n");
      out.write("	            return exam || { Exam_Code: \"\", Exam_Name: examName };\r\n");
      out.write("	        }\r\n");
      out.write("	        return { Exam_Code: \"\", Exam_Name: examName };\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("		function updateIntroduction(introductionData){\r\n");
      out.write("			if(introductionData == null){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$(\"#ResumeProfile_Contents_\").html(introductionData);\r\n");
      out.write("		}\r\n");
      out.write("		/* 수정 삭제를 위한 js functions end */\r\n");
      out.write("		/* 등록을 위한 js functions start */\r\n");
      out.write("		function formatDate(dateString) {\r\n");
      out.write("	        if (!dateString) return null;\r\n");
      out.write("	        var parts = dateString.split('.');\r\n");
      out.write("	        if (parts.length !== 2) return dateString; // 잘못된 형식이면 원래 문자열 반환\r\n");
      out.write("	        return parts[0] + '-' + (parts[1].length === 1 ? '0' + parts[1] : parts[1]) + '-01'; // 월을 2자리로 만들고 일을 01로 설정\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("		function removeCommasAndParseInt(str) {\r\n");
      out.write("		    return parseInt(str.replace(/,/g, ''), 10);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function createResumeData() {\r\n");
      out.write("		    const mainData = {\r\n");
      out.write("		    	id: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${resumeNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\",\r\n");
      out.write("		        owner: $('#UserInfo_M_Name').val(),\r\n");
      out.write("		        email: $('#UserInfo_M_Email').val(),\r\n");
      out.write("		        title: $('#UserResume_M_Resume_Title').val(),\r\n");
      out.write("		        profile: \"profile_1.png\",\r\n");
      out.write("		        birth: formatDate($('#UserInfo_M_Born').val()),\r\n");
      out.write("		        gender: $('#genderSelect').val(),\r\n");
      out.write("		        tel: $('input[name=\"UserInfo.M_Hand_Phone\"]').eq(0).val(),\r\n");
      out.write("		        phone: $('input[name=\"UserInfo.M_Hand_Phone\"]').eq(1).val(),\r\n");
      out.write("		        addr: ($('#sido1').val() + ' ' + $('#gugun1').val()).trim(),\r\n");
      out.write("		        introduce: $('.textarea-introduction textarea').val(),\r\n");
      out.write("		        modifyDate: new Date().toISOString().split('T')[0]\r\n");
      out.write("		    };\r\n");
      out.write("\r\n");
      out.write("		    const subData = {\r\n");
      out.write("		        skills: $('.chip.active').map(function() {\r\n");
      out.write("		            return { skillName: $(this).data('value') };\r\n");
      out.write("		        }).get(),\r\n");
      out.write("		        education: $('.formWrapEducation .container').map(function() {\r\n");
      out.write("		            const $this = $(this);\r\n");
      out.write("		            return {\r\n");
      out.write("		                schoolClassification: $this.find('[name$=\"Mstr_Dctr_Type_Code\"]').val(),\r\n");
      out.write("		                schoolName: $this.find('input[data-type=\"School_Name\"][type=\"text\"]').val(),\r\n");
      out.write("		                admissionDate: formatDate($this.find('[name$=\"Entc_YM\"]').val()),\r\n");
      out.write("		                graduationDate: formatDate($this.find('[name$=\"Grad_YM\"]').val()),\r\n");
      out.write("		                graduationState: $this.find('.dropdown-edcation-state .button.buttonChoose span').text(),\r\n");
      out.write("		                major: $this.find('[id^=\"univmajor_\"]').val(),\r\n");
      out.write("		                grades: parseFloat($this.find('[name$=\"Grade\"]').val()),\r\n");
      out.write("		                totalScore: parseFloat($this.find('[name$=\"Grade_Prft_Scr\"]').val())\r\n");
      out.write("		            };\r\n");
      out.write("		        }).get(),\r\n");
      out.write("		        career: $('.formWrapCareer .container').map(function() {\r\n");
      out.write("		            const $this = $(this);\r\n");
      out.write("		            return {\r\n");
      out.write("		                companyName: $this.find('[id^=\"Career_C_Name_\"]').val(),\r\n");
      out.write("		                dname: $this.find('[id^=\"Career_C_Part_\"]').val(),\r\n");
      out.write("		                joinDate: formatDate($this.find('[id^=\"Career_CSYM_\"]').val()),\r\n");
      out.write("		                resignationDate: formatDate($this.find('[id^=\"Career_CEYM_\"]').val()), // 1일씩 밀리는 이슈\r\n");
      out.write("		                jobDescription: $this.find('.textarea-career').val(),\r\n");
      out.write("		                position: $this.find('[name=\"position_field\"]').val(),\r\n");
      out.write("		                sal: parseInt(removeCommas($this.find('[id^=\"Career_M_MainPay_User_\"]').val()))\r\n");
      out.write("		            };\r\n");
      out.write("		        }).get(),\r\n");
      out.write("		        certifications: $('.formWrapCertificate .container').map(function() {\r\n");
      out.write("		            const $this = $(this);\r\n");
      out.write("		            return {\r\n");
      out.write("		                certificateName: $this.find('[id^=\"License_Search_\"]').val(),\r\n");
      out.write("		                publisher: $this.find('[id^=\"License_Lc_Pub_\"]').val(),\r\n");
      out.write("		                acquisitionDate: formatDate($this.find('[id^=\"License_Lc_YYMM_\"]').val())\r\n");
      out.write("		            };\r\n");
      out.write("		        }).get(),\r\n");
      out.write("		        languages: $('.formWrapLanguage .container').map(function() {\r\n");
      out.write("		            const $this = $(this);\r\n");
      out.write("		            const evalCategory = $this.find('[id^=\"Language_Eval_Category_\"]').val();\r\n");
      out.write("		            const isConversation = evalCategory === '1';\r\n");
      out.write("\r\n");
      out.write("		            return {\r\n");
      out.write("		                language: $this.find('.dropdown-language-name .button.buttonChoose > span').text().trim(),\r\n");
      out.write("		                testName: isConversation ? null : $this.find('.devExamDropdown .button.buttonChoose > span').text().trim(),\r\n");
      out.write("		                langLevel: isConversation \r\n");
      out.write("		                    ? $this.find('.devConversationArea .dropdown-language-grade .button.buttonChoose > span').text().trim()\r\n");
      out.write("		                    : $this.find('.devExamArea [id^=\"Language_Test1_Point_I_\"]').val(),\r\n");
      out.write("		                category: isConversation ? '회화능력' : '공인시험',\r\n");
      out.write("		                acquisitionDate: formatDate($this.find('[id^=\"Language_Test_YYMM_\"]').val())\r\n");
      out.write("		            };\r\n");
      out.write("		        }).get()\r\n");
      out.write("		    };\r\n");
      out.write("\r\n");
      out.write("		    Object.keys(subData).forEach(key => {\r\n");
      out.write("		        if (Array.isArray(subData[key]) && subData[key].length === 0) {\r\n");
      out.write("		            delete subData[key];\r\n");
      out.write("		        }\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		    return {\r\n");
      out.write("		        ...mainData,\r\n");
      out.write("		        subData: JSON.stringify(subData)\r\n");
      out.write("		    };\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function formatDate(dateString) {\r\n");
      out.write("		    if (!dateString) return null;\r\n");
      out.write("		    const date = new Date(dateString);\r\n");
      out.write("		    return date.toISOString().split('T')[0];\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function removeCommas(str) {\r\n");
      out.write("		    return str.replace(/,/g, '');\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		/* 등록을 위한 js functions end */\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"__next\" data-reactroot=\"\">\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../assets/layout/user/header.jsp", out, false);
      out.write("\r\n");
      out.write("		<main class=\"JobsFeed_Jobsfeed__DpeV9\">  \r\n");
      out.write("			<section class=\"Section_Section__P1hhc\">\r\n");
      out.write("			<!-- golgolz start -->\r\n");
      out.write("				<div class=\"resumePage\">\r\n");
      out.write("					<form action=\"https://www.jobkorea.co.kr/User/Resume/Save\" method=\"post\" id=\"frm1\">\r\n");
      out.write("						<div class=\"resumeWrapper\">\r\n");
      out.write("							<div class=\"resumeContainer\">\r\n");
      out.write("								<h2 style=\"font-size: 36px; color:#000; margin-bottom: 20px; font-weight: bold;\">이력서 등록</h2>\r\n");
      out.write("								<div class=\"formWrap formWrapCareer\" id=\"formCareer\" style=\"\">\r\n");
      out.write("									<div class=\"header\">\r\n");
      out.write("										<h2 class=\"header\">제목</h2>\r\n");
      out.write("									</div>\r\n");
      out.write("								</div>\r\n");
      out.write("								<div class=\"resumeTitle\">\r\n");
      out.write("									<input id=\"UserResume_M_Resume_Title\" maxlength=\"100\" name=\"UserResume.M_Resume_Title\" placeholder=\"기업에게 나에 대해 알려줍시다. 강점, 목표, 관심분야도 좋아요.\" type=\"text\" value=\"\" autofocus />\r\n");
      out.write("								</div>\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/profile.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/skill.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/edu.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/career.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/certification.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/language.jsp", out, false);
      out.write("\r\n");
      out.write(" 								");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./category/introduction.jsp", out, false);
      out.write("\r\n");
      out.write("								<div id=\"resumeBtns\">\r\n");
      out.write("									");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div id=\"healthLayer\" style=\"display: none\"></div>\r\n");
      out.write("				<script src=\"http://localhost/recruit-app/assets/js/user/resume/countdown.js\"></script>\r\n");
      out.write("				<script src=\"http://localhost/recruit-app/assets/js/user/resume/LoginWatcher.js\"></script>\r\n");
      out.write("				<script type=\"text/javascript\" src=\"http://localhost/recruit-app/assets/js/user/resume/page_leave.js\"></script>\r\n");
      out.write("				<script type=\"text/template\" id=\"tplKeywordCheckBox\"></script>\r\n");
      out.write("				<script type=\"text/template\" id=\"tplCommonDirectInput\"></script>\r\n");
      out.write("				<script type=\"text/template\" id=\"tplCommonNotFound\"></script>\r\n");
      out.write("				<script type=\"text/template\" id=\"tplCommonSearch\"></script>\r\n");
      out.write("				<script type=\"text/template\" id=\"tplDepthCommonItem\"></script>\r\n");
      out.write("			<!-- golgolz end -->\r\n");
      out.write("			</section>\r\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../assets/layout/user/footer.jsp", out, false);
      out.write("  \r\n");
      out.write("		</main>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("        								");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("        								");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("								    ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/resume/detail.jsp(846,16) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty resumeNum}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("											<input type=\"button\" id=\"updateBtn\" class=\"golgolBtn btn btn-outline-warning btn-sm update-btn\" value=\"수정\" />\r\n");
          out.write("											<input type=\"button\" id=\"removeBtn\" class=\"golgolBtn btn btn-outline-danger btn-sm remove-btn\" value=\"삭제\" />\r\n");
          out.write("								    	");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("											<input type=\"button\" id=\"registerBtn\" class=\"golgolBtn btn btn-outline-success btn-sm register-btn\" value=\"등록\" />\r\n");
          out.write("								        ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }
}
